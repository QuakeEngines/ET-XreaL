# -*- mode: python -*-
# Enemy Territory build script
# TTimo <ttimo@idsoftware.com>
# http://scons.sourceforge.net

import sys, os
import scons_utils

Import( 'GLOBALS' )
Import( GLOBALS )

jpeg_list = [
'src/libs/jpeg-6/jcapimin.c',
'src/libs/jpeg-6/jchuff.c',
'src/libs/jpeg-6/jcinit.c',
'src/libs/jpeg-6/jccoefct.c',
'src/libs/jpeg-6/jccolor.c',
'src/libs/jpeg-6/jfdctflt.c',
'src/libs/jpeg-6/jcdctmgr.c',
'src/libs/jpeg-6/jcphuff.c',
'src/libs/jpeg-6/jcmainct.c',
'src/libs/jpeg-6/jcmarker.c',
'src/libs/jpeg-6/jcmaster.c',
'src/libs/jpeg-6/jcomapi.c',
'src/libs/jpeg-6/jcparam.c',
'src/libs/jpeg-6/jcprepct.c',
'src/libs/jpeg-6/jcsample.c',
'src/libs/jpeg-6/jdapimin.c',
'src/libs/jpeg-6/jdapistd.c',
'src/libs/jpeg-6/jdatasrc.c',
'src/libs/jpeg-6/jdcoefct.c',
'src/libs/jpeg-6/jdcolor.c',
'src/libs/jpeg-6/jddctmgr.c',
'src/libs/jpeg-6/jdhuff.c',
'src/libs/jpeg-6/jdinput.c',
'src/libs/jpeg-6/jdmainct.c',
'src/libs/jpeg-6/jdmarker.c',
'src/libs/jpeg-6/jdmaster.c',
'src/libs/jpeg-6/jdpostct.c',
'src/libs/jpeg-6/jdsample.c',
'src/libs/jpeg-6/jdtrans.c',
'src/libs/jpeg-6/jerror.c',
'src/libs/jpeg-6/jidctflt.c',
'src/libs/jpeg-6/jmemmgr.c',
'src/libs/jpeg-6/jmemnobs.c',
'src/libs/jpeg-6/jutils.c',
]

png_list = [
'src/libs/png/png.c',
'src/libs/png/pngset.c',
'src/libs/png/pngget.c',
'src/libs/png/pngrutil.c',
'src/libs/png/pngtrans.c',
'src/libs/png/pngwutil.c',
'src/libs/png/pngread.c',
'src/libs/png/pngrio.c',
'src/libs/png/pngwio.c',
'src/libs/png/pngwrite.c',
'src/libs/png/pngrtran.c',
'src/libs/png/pngwtran.c',
'src/libs/png/pngmem.c',
'src/libs/png/pngerror.c',
'src/libs/png/pngpread.c',
]

zlib_list = [
'src/libs/zlib/adler32.c',
'src/libs/zlib/compress.c',
'src/libs/zlib/crc32.c',
'src/libs/zlib/gzio.c',
'src/libs/zlib/uncompr.c',
'src/libs/zlib/deflate.c',
'src/libs/zlib/trees.c',
'src/libs/zlib/zutil.c',
'src/libs/zlib/inflate.c',
'src/libs/zlib/infback.c',
'src/libs/zlib/inftrees.c',
'src/libs/zlib/inffast.c',
'src/libs/zlib/ioapi.c',
]

freetype_list = [
#'src/freetype/src/autofit/autofit.c',
#'src/freetype/src/bdf/bdf.c',
#'src/freetype/src/cff/cff.c',
#'src/freetype/src/base/ftbase.c',
#'src/freetype/src/base/ftbitmap.c',
#'src/freetype/src/cache/ftcache.c',
#'src/freetype/src/base/ftdebug.c',
#'src/freetype/src/base/ftgasp.c',
#'src/freetype/src/base/ftglyph.c',
#'src/freetype/src/gzip/ftgzip.c',
#'src/freetype/src/base/ftinit.c',
#'src/freetype/src/lzw/ftlzw.c',
#'src/freetype/src/base/ftstroke.c',
#'src/freetype/src/base/ftsystem.c',
#'src/freetype/src/smooth/smooth.c',
#'src/freetype/src/base/ftbbox.c',
#'src/freetype/src/base/ftmm.c',
#'src/freetype/src/base/ftpfr.c',
#'src/freetype/src/base/ftsynth.c',
#'src/freetype/src/base/fttype1.c',
#'src/freetype/src/base/ftwinfnt.c',
#'src/freetype/src/pcf/pcf.c',
#'src/freetype/src/pfr/pfr.c',
#'src/freetype/src/psaux/psaux.c',
#'src/freetype/src/pshinter/pshinter.c',
#'src/freetype/src/psnames/psmodule.c',
#'src/freetype/src/raster/raster.c',
#'src/freetype/src/sfnt/sfnt.c',
#'src/freetype/src/truetype/truetype.c',
#'src/freetype/src/type1/type1.c',
#'src/freetype/src/cid/type1cid.c',
#'src/freetype/src/type42/type42.c',
#'src/freetype/src/winfonts/winfnt.c',
]

openexr_list = [
'src/libs/openexr/half.cpp',
]

renderer_list = [
'src/engine/renderer/tr_animation_mdm.c',
'src/engine/renderer/tr_animation_mds.c',
'src/engine/renderer/tr_backend.c',
'src/engine/renderer/tr_bsp.c',
'src/engine/renderer/tr_cmds.c',
'src/engine/renderer/tr_cmesh.c',
'src/engine/renderer/tr_curve.c',
'src/engine/renderer/tr_decals.c',
'src/engine/renderer/tr_flares.c',
'src/engine/renderer/tr_font.c',
'src/engine/renderer/tr_image.c',
'src/engine/renderer/tr_init.c',
'src/engine/renderer/tr_light.c',
'src/engine/renderer/tr_main.c',
'src/engine/renderer/tr_marks.c',
'src/engine/renderer/tr_mesh.c',
'src/engine/renderer/tr_model.c',
'src/engine/renderer/tr_noise.c',
'src/engine/renderer/tr_scene.c',
'src/engine/renderer/tr_shade.c',
'src/engine/renderer/tr_shade_calc.c',
'src/engine/renderer/tr_shader.c',
'src/engine/renderer/tr_shadows.c',
'src/engine/renderer/tr_skin.c',
'src/engine/renderer/tr_sky.c',
'src/engine/renderer/tr_surface.c',
'src/engine/renderer/tr_world.c'
]

rendererGL3_list = [
'src/engine/rendererGL3/tr_animation_mdm.c',
'src/engine/rendererGL3/tr_animation.c',
'src/engine/rendererGL3/tr_backend.c',
'src/engine/rendererGL3/tr_bsp.c',
'src/engine/rendererGL3/tr_cmds.c',
'src/engine/rendererGL3/tr_curve.c',
'src/engine/rendererGL3/tr_decals.c',
'src/engine/rendererGL3/tr_fbo.c',
'src/engine/rendererGL3/tr_flares.c',
'src/engine/rendererGL3/tr_fog.c',
'src/engine/rendererGL3/tr_font.c',
'src/engine/rendererGL3/tr_image.c',
'src/engine/rendererGL3/tr_image_dds.c',
'src/engine/rendererGL3/tr_image_exr.cpp',
'src/engine/rendererGL3/tr_image_jpg.c',
'src/engine/rendererGL3/tr_image_png.c',
'src/engine/rendererGL3/tr_image_tga.c',
'src/engine/rendererGL3/tr_init.c',
'src/engine/rendererGL3/tr_light.c',
'src/engine/rendererGL3/tr_main.c',
'src/engine/rendererGL3/tr_marks.c',
'src/engine/rendererGL3/tr_mesh.c',
'src/engine/rendererGL3/tr_model.c',
'src/engine/rendererGL3/tr_model_md3.c',
'src/engine/rendererGL3/tr_model_mdc.c',
'src/engine/rendererGL3/tr_model_mdm.c',
'src/engine/rendererGL3/tr_model_psk.c',
'src/engine/rendererGL3/tr_model_skel.c',
'src/engine/rendererGL3/tr_noise.c',
'src/engine/rendererGL3/tr_scene.c',
'src/engine/rendererGL3/tr_shade.c',
'src/engine/rendererGL3/tr_shade_calc.c',
'src/engine/rendererGL3/tr_shader.c',
'src/engine/rendererGL3/tr_shadows.c',
'src/engine/rendererGL3/tr_skin.c',
'src/engine/rendererGL3/tr_sky.c',
'src/engine/rendererGL3/tr_surface.c',
'src/engine/rendererGL3/tr_vbo.c',
'src/engine/rendererGL3/tr_world.c',
]

server_list = [
'src/engine/server/sv_bot.c',
'src/engine/server/sv_ccmds.c',
'src/engine/server/sv_client.c',
'src/engine/server/sv_game.c',
'src/engine/server/sv_init.c',
'src/engine/server/sv_main.c',
'src/engine/server/sv_net_chan.c',
'src/engine/server/sv_snapshot.c',
'src/engine/server/sv_world.c'
]

qcommon_list = [
'src/engine/qcommon/cm_load.c',
'src/engine/qcommon/cm_patch.c',
'src/engine/qcommon/cm_polylib.c',
'src/engine/qcommon/cm_test.c',
'src/engine/qcommon/cm_trace.c',
'src/engine/qcommon/cmd.c',
'src/engine/qcommon/common.c',
'src/engine/qcommon/cvar.c',
'src/engine/qcommon/files.c',
'src/engine/qcommon/huffman.c',
'src/engine/qcommon/md4.c',
'src/engine/qcommon/msg.c',
'src/engine/qcommon/net_chan.c',
'src/engine/qcommon/unzip.c',
'src/engine/qcommon/vm.c',
'src/engine/qcommon/vm_interpreted.c'
]

if ( cpu == 'x86' ):
	qcommon_list += [ 'src/engine/qcommon/vm_x86.c' ]
	
#if ( cpu == 'x86_64' ):
#	qcommon_list += [ 'src/engine/qcommon/vm_x86_64.c' ]


splines_list = [
'src/engine/splines/math_angles.cpp',
'src/engine/splines/math_matrix.cpp',
'src/engine/splines/math_quaternion.cpp',
'src/engine/splines/math_vector.cpp',
'src/engine/splines/q_parse.cpp',
'src/engine/splines/q_shared.c',
'src/engine/splines/splines.cpp',
'src/engine/splines/util_str.cpp',
]

client_list = [
'src/engine/client/cl_cgame.c',
'src/engine/client/cl_cin.c',
'src/engine/client/cl_console.c',
'src/engine/client/cl_input.c',
'src/engine/client/cl_keys.c',
'src/engine/client/cl_main.c',
'src/engine/client/cl_net_chan.c',
'src/engine/client/cl_parse.c',
'src/engine/client/cl_scrn.c',
'src/engine/client/cl_ui.c',
'src/engine/client/snd_adpcm.c',
'src/engine/client/snd_dma.c',
'src/engine/client/snd_mem.c',
'src/engine/client/snd_mix.c',
'src/engine/client/snd_wavelet.c'
]


linux_sources = [
        'src/engine/unix/linux_signals.c',
        'src/engine/unix/unix_main.c',
        'src/engine/unix/unix_net.c',
        'src/engine/unix/unix_shared.c',
        'src/shared/q_shared.c',
        'src/shared/q_math.c',
#        'unix/matha.S'
]

linux_full_sources = [
	'src/libs/glew/src/glew.c',
        'src/engine/unix/linux_gl3imp.c',
        #'src/engine/unix/linux_qgl.c',
        'src/engine/unix/linux_snd.c',
        'src/engine/unix/linux_joystick.c',
#        'unix/snd_mixa.S'
]

mac_sources = [
	'game/q_shared.c',
	'game/q_math.c',
	'src/engine/mac/mac_main.cpp',
	'src/engine/mac/mac_input.cpp',
	'src/engine/mac/mac_glimp.cpp',
	'src/engine/mac/mac_files.cpp',
	'src/engine/mac/mac_net.cpp',
	'src/engine/mac/mac_console.c',
	'src/engine/mac/mac_snddma.c',
	'src/engine/mac/CarbonMouse.cpp',
	'src/engine/mac/mac_event.cpp',
#	'src/engine/mac/HID Manager/HID_Configure.c',
#	'src/engine/mac/HID Manager/HID_CFM.c',
	'src/engine/mac/MacPrefs.cpp',
	'src/engine/mac/PickMonitor/pickmonitor.cpp',
	'src/engine/mac/PickMonitor/userpane.cpp',
	'src/engine/mac/mac_qgl.c',
	'src/engine/mac/mac_specific.cpp',
	'src/engine/mac/AGLUtils.cpp',
	'src/engine/mac/CDrawSprocket.cpp'
]

win32_sources = [
	'src/engine/win32/win_main.c',
	'src/engine/win32/win_net.c',
	'src/engine/win32/win_shared.c',
	'src/engine/win32/win_wndproc.c',
	'src/engine/win32/win_syscon.c',
        'game/q_shared.c',
        'game/q_math.c',
]

win32_full_sources = [
	'src/engine/win32/win_input.c',
	'src/engine/win32/win_gl3imp.c',
	#'src/engine/win32/win_qgl.c',
	'src/engine/win32/win_gamma.c',
	'src/engine/win32/win_snd.c',
]

botlib_list = [
	'src/engine/botlib/be_aas_bspq3.c',
	'src/engine/botlib/be_aas_cluster.c',
	'src/engine/botlib/be_aas_debug.c',
	'src/engine/botlib/be_aas_entity.c',
	'src/engine/botlib/be_aas_file.c',
	'src/engine/botlib/be_aas_main.c',
	'src/engine/botlib/be_aas_move.c',
	'src/engine/botlib/be_aas_optimize.c',
	'src/engine/botlib/be_aas_reach.c',
	'src/engine/botlib/be_aas_route.c',
	'src/engine/botlib/be_aas_routealt.c',
	'src/engine/botlib/be_aas_routetable.c',
	'src/engine/botlib/be_aas_sample.c',
	'src/engine/botlib/be_ai_char.c',
	'src/engine/botlib/be_ai_chat.c',
	'src/engine/botlib/be_ai_gen.c',
	'src/engine/botlib/be_ai_goal.c',
	'src/engine/botlib/be_ai_move.c',
	'src/engine/botlib/be_ai_weap.c',
	'src/engine/botlib/be_ai_weight.c',
	'src/engine/botlib/be_ea.c',
	'src/engine/botlib/be_interface.c',
	'src/engine/botlib/l_crc.c',
	'src/engine/botlib/l_libvar.c',
	'src/engine/botlib/l_log.c',
	'src/engine/botlib/l_memory.c',
	'src/engine/botlib/l_precomp.c',
	'src/engine/botlib/l_script.c',
	'src/engine/botlib/l_struct.c'
]

botlib_env = env.Clone()
botlib_env.Append( CPPDEFINES = [ 'BOTLIB' ] )

botlib_objs = []
for i in botlib_list:
	botlib_objs.append( botlib_env.StaticObject( i ) )

#
#staticx11_libs = [ 'libXxf86dga.a', 'libXxf86vm.a' ]
#if ( os.path.exists( os.path.join( '/usr/lib', staticx11_libs[0] ) ) ):
#	staticx11_libs = [ os.path.join( '/usr/lib', i ) for i in staticx11_libs ]
#else:
#	staticx11_libs = [ os.path.join( '/usr/X11R6/lib', i ) for i in staticx11_libs ]
#

#
#if ( g_os == 'Linux' ):
#	nasm_env = Environment( tools = [ 'nasm' ] )
#	nasm_env['ASFLAGS'] = '-f elf'
#	snapvector = nasm_env.StaticObject( 'src/engine/unix/snapvector.asm' )

#	# gas assembly, with preprocessing
#	gas_env = Environment( tools = [ 'gcc', 'gas' ] )
#	gas_env.Append( CPPDEFINES = [ 'ELF' ] )
#	gas_env.Append( ASFLAGS = [ '-m32', '-x', 'assembler-with-cpp' ] )
#	matha = gas_env.StaticObject( 'src/engine/unix/matha.spp' )
#        snd_mixa = gas_env.StaticObject( 'src/engine/unix/snd_mixa.spp' )
#

splines_env = env.Clone()
splines_lib = splines_env.StaticLibrary(splines_list)

local_env = env.Clone()

if g_os == 'Linux':
	local_env.Append(LIBS = ['dl'])
	if local_dedicated == 0:
		local_env.Append(LIBS = ['m', 'GL'])
		local_env.Append(LIBPATH = ['/usr/X11R6/lib'])
		local_env.Append(CPPPATH = ['src/libs/curl-7.12.2/include'])
		local_env.Append(CPPPATH = ['src/libs/glew/include'])
		local_env.Append(CPPPATH = ['src/libs/zlib'])
		local_env.Append(CPPDEFINES = ['REF_HARD_LINKED'])
		local_env.Append(CPPDEFINES = ['PNG_NO_ASSEMBLER_CODE'])
		local_env.ParseConfig('pkg-config --cflags --libs x11')
		local_env.ParseConfig('pkg-config --cflags --libs xext')
		local_env.ParseConfig('pkg-config --cflags --libs xxf86dga')
		local_env.ParseConfig('pkg-config --cflags --libs xxf86vm')
		
		if env['curl'] == 'system':
			local_env.ParseConfig('pkg-config --cflags --libs libcurl')
		
	else:
		local_env.Append(CPPDEFINES = ['DEDICATED'])
		local_env.Append(LIBS = ['m'])

	#if gcc3 == 0:
	#	env.Append(LINKFLAGS=[ os.popen( env['CXX'] + ' -print-file-name=libstdc++.a' ).read().rstrip() ])
	#else:
		local_env['ENV']['CC'] = env['CC']
		#local_env['LINK'] = 'src/engine/unix/staticlinkcpp.sh'
		
		
		
elif g_os == 'win32':
	local_env.Append( LIBS = [ 'm', 'winmm', 'wsock32', 'gdi32', 'ole32', 'iphlpapi' ] )
	if ( local_dedicated == 0 ):
		local_env.Append( LIBS = [ 'dinput', 'dsound' ] )
		local_env.Append( CPPPATH = [ 'curl-7.12.2/include' ] )
	else:
		local_env.Append( CPPDEFINES = [ 'DEDICATED' ] )
	local_env['LINK'] = env['CXX']
	
	
	
elif g_os == 'Darwin':
	local_env.Append( LINKFLAGS = [ '-framework', 'AGL', '-framework', 'OpenGL', '-framework', 'Carbon', '-framework', 'IOKit', '-framework', 'DrawSprocket', '-lcurl' ] )




#if MASTER != '':
#	local_env.Append( CPPDEFINES = [ 'MASTER_SERVER_NAME=\\"%s\\"' % MASTER ] )

source_list = server_list + qcommon_list
if g_os == 'Linux':
	source_list += linux_sources #+ snapvector + matha
	
elif g_os == 'win32':
	source_list += win32_sources
	
elif g_os == 'Darwin':
	if ( BUILD == 'release' ):
		local_env.Append( CPPFLAGS = [ '-include', 'src/engine/mac/MacPrefix.h' ] )
	else:
		local_env.Append( CPPFLAGS = [ '-include', 'src/engine/mac/MacPrefixDebug.h' ] )
	mac_objects = []
	for i in mac_sources:
		mac_objects.append( local_env.StaticObject( i ) )
	source_list += mac_objects

source_list += botlib_objs

if local_dedicated == 0:
	source_list += jpeg_list
	source_list += png_list
	source_list += zlib_list
	source_list += openexr_list
	source_list += rendererGL3_list
	source_list += client_list
	source_list += ['src/engine/qcommon/dl_main_curl.c']
	source_list += curl_lib
	if g_os == 'Linux':
		#source_list += snd_mixa
		source_list += linux_full_sources
		#source_list += staticx11_libs
	if g_os == 'win32':
		source_list += win32_full_sources
else:
	source_list += ['src/engine/null/null_client.c', 'src/engine/null/null_input.c', 'src/engine/null/null_snddma.c', 'src/engine/qcommon/dl_main_stubs.c']
source_list += splines_lib


if local_dedicated == 0:
	local_env.Program(target = 'etxreal', source = source_list)
	
	if g_os == 'win32':
		env.InstallAs('#ETXreaL.exe', 'etxreal')
	else:
		env.InstallAs('#etxreal', 'etxreal')
else:
	local_env.Program(target = 'etxreal-dedicated', source = source_list)

	if g_os == 'win32':
		local_env.InstallAs('#ETXreaL-dedicated.exe', 'etxreal-dedicated')
	else:
		local_env.InstallAs('#etxreal-dedicated', 'etxreal-dedicated')


